{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introdu\u00e7\u00e3o ao PyQGIS Descri\u00e7\u00e3o Esta Wiki tem a finalidade de apresentar um material did\u00e1tico b\u00e1sico sobre PyQGIS para o desenvolvimento de ferramentas que possam auxiliar na produ\u00e7\u00e3o de geoinforma\u00e7\u00e3o. Se\u00e7\u00f5es 1) Introdu\u00e7\u00e3o ao Python","title":"Introdu\u00e7\u00e3o ao PyQGIS"},{"location":"#introducao-ao-pyqgis","text":"","title":"Introdu\u00e7\u00e3o ao PyQGIS"},{"location":"#descricao","text":"Esta Wiki tem a finalidade de apresentar um material did\u00e1tico b\u00e1sico sobre PyQGIS para o desenvolvimento de ferramentas que possam auxiliar na produ\u00e7\u00e3o de geoinforma\u00e7\u00e3o.","title":"Descri\u00e7\u00e3o"},{"location":"#secoes","text":"1) Introdu\u00e7\u00e3o ao Python","title":"Se\u00e7\u00f5es"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/","text":"A Estrutura do Python Vari\u00e1veis Vari\u00e1veis s\u00e3o espa\u00e7os de mem\u00f3ria utilizados para armazenar e manipular dados. Diferentemente de outras linguagens de programa\u00e7\u00e3o, n\u00e3o \u00e9 necess\u00e1rio declarar o tipo das vari\u00e1veis a serem usadas no in\u00edcio do c\u00f3digo. Alguns dos tipos de vari\u00e1veis mais utilizados no Python s\u00e3o: * int: armazena n\u00fameros inteiros. * float: armazena n\u00fameros decimais. * string: armazena caracteres de texto N\u00fameros Os tipos de n\u00fameros utilizados no Python s\u00e3o: * int: n\u00fameros inteiros * float: n\u00fameros decimais * long: n\u00fameros decimais longos * complex: n\u00fameros complexos Para manipular os n\u00fameros no Python, o usu\u00e1rio disp\u00f5e de diversos operadores aritm\u00e9ticos, l\u00f3gicos e de compara\u00e7\u00e3o. Operadores Aritm\u00e9ticos: S\u00edmbolo Descri\u00e7\u00e3o Exemplo + Soma 5+5=10 - Subtra\u00e7\u00e3o 7-2=5 * Multiplica\u00e7\u00e3o 3*4=12 / Divis\u00e3o 9/3=3 % Resto da divis\u00e3o 10%3=1 ** Pot\u00eancia 3**3=27 Operadores de Compara\u00e7\u00e3o: Operador Descri\u00e7\u00e3o Exemplo < Menor que a<10 <= Menor ou igual b<=5 > Maior que c>2 >= Maior ou igual d>=8 == Igual e==5 != Diferente f!=12 Operadores L\u00f3gicos: Operador Descri\u00e7\u00e3o Exemplo not N\u00e3o not a and E (a<=10) and (c=5) or Ou (a<=10) or (c=5) Strings As strings, como visto anteriormente, s\u00e3o um conjunto de caracteres. Normalmente, s\u00e3o utilizadas quando as vari\u00e1veis utilizadas s\u00e3o um texto (palavra, frase, \u2026). Diferentemente dos n\u00fameros, as strings precisam ser introduzidas por meio de aspas simples ou duplas para que sejam reconhecidas pelo Python. No Python, encontramos diversas fun\u00e7\u00f5es para a manipula\u00e7\u00e3o de strings, uma vez que s\u00e3o vari\u00e1veis que n\u00e3o aceitam operadores como os n\u00fameros. Assim, apresentamos abaixo algumas fun\u00e7\u00f5es utilizadas quando trabalhamos com strings: M\u00e9todo Descri\u00e7\u00e3o Exemplo len() Retorna o tamanho da string. string = \u201cpython\u201d len(string) 6 capitalize() Retorna a string com a primeira letra mai\u00fascula. string = \u201cpython\u201d string.capitalize() \u201cPython\u201d count() Informa quantas vezes um caractere aparece na string. string = \u201cpython forever\u201d string.count(\u201co\u201d) 2 startswith() Verifica se a string inicia com determinada sequ\u00eancia. string = \u201cpython\u201d string.startswith(\u201cpyt\u201d) True replace(x1,x2) Substitui na string o trecho x1 pelo x2. string = \u201cpython\u201d string.replace(\u201cthon\u201d,\u201cQGIS\u201d) \u201cpyQGIS\u201d find() Retorna o \u00edndice da primeira ocorr\u00eancia de um determinado caractere na string. string = \u201cpython\u201d string.find(\u201ch\u201d) 3 Al\u00e9m disso, \u00e9 poss\u00edvel manipular strings apenas com operadores presentes no Python, sem a necessidade de utilizar uma fun\u00e7\u00e3o. Abaixo, encontram-se exemplos de como utiliz\u00e1-los: * Concatena\u00e7\u00e3o: a = \"Py\" b = \"thon\" ---------- a+b = \"Python\" Fatiamento: a = \"Python\" ------------ a[1:4] -> \"yth\" a[:3] -> \"Pyt\" a[2:] -> \"thon\" Listas Listas s\u00e3o conjuntos sequenciais de valores, sendo cada um deles identificado por um \u00edndice. Os \u00edndices s\u00e3o sequenciais e come\u00e7am no \u201c0\u201d. Para se declarar uma lista, \u00e9 necess\u00e1ria a seguinte forma: lista = [\"python\", 1234, [1,2,3,4]] ----------------------------------- lista[0] -> \"python\" lista[1] -> 1234 lista[2] -> [1,2,3,4] len(lista) = 3 Para alterar algum elemento da lista, basta fazer uma atribui\u00e7\u00e3o de valor atrav\u00e9s do \u00edndice. lista = [\"python\", 1234, [1,2,3,4]] ----------------------------------- lista[0] = \"QGIS\" lista -> [\"QGIS\", 1234, [1,2,3,4]] Assim como as strings, as listas tamb\u00e9m possuem fun\u00e7\u00f5es espec\u00edficas que auxiliam o usu\u00e1rio em sua manipula\u00e7\u00e3o. Algumas muito utilizadas est\u00e3o apresentadas na tabela abaixo: M\u00e9todo Descri\u00e7\u00e3o Exemplo len() Retorna o tamanho da lista. lista = [1, 2, 3, 4] len(lista) 4 min()/max() Retorna o menor/maior valor da lista. lista = [1, 2, 3, 4] min(lista) 1 sum() Retorna a soma dos elementos da lista. lista = [1, 2, 3, 4] sum(lista) 10 append() Adiciona um novo valor ao final de outra lista. lista = [1, 2, 3, 4] lista.append(5) lista = [1, 2, 3, 4, 5] del() Remove um elemento da lista. lista = [1, 2, 3, 4] del lista[0] lista = [2, 3, 4] sort() Ordena os elementos da lista em ordem crescente. lista = [4, 3, 2, 1] lista.sort() lista = [1, 2, 3, 4] reverse() Inverte os elementos da lista. lista = [1, 2, 3, 4] lista.reverse() lista = [4, 3, 2, 1] Al\u00e9m das fun\u00e7\u00f5es, o Python possui operadores que auxiliam na manipula\u00e7\u00e3o de listas: * Concatena\u00e7\u00e3o : a = [1, 2, 3] b = [4, 5, 6] ------------- a + b -> [1, 2, 3, 4, 5, 6] Repeti\u00e7\u00e3o : a = [1, 2, 3] ------------- a*3 -> [1, 2, 3, 1, 2, 3, 1, 2, 3] Fatiamento : lista = [\"python\", 123, [1, 2, 3]] ---------------------------------- lista[1:2] -> [123] lista[:3] -> [\"python\", 123, [1, 2, 3]] lista[2:] -> [[1, 2, 3]] Tuplas As tuplas, assim como as listas, s\u00e3o conjuntos sequenciais de valores, sendo cada valor identificado por um \u00edndice. A principal diferen\u00e7a entre elas \u00e9 que as tuplas s\u00e3o imut\u00e1veis, ou seja, seus elementos n\u00e3o podem ser alterados. Al\u00e9m disso, visualmente, as tuplas s\u00e3o apresentadas com par\u00eanteses, diferentemente dos colchetes de uma lista. tupla = (1, 2, 3, 4) -------------------- type(tupla) -> tuple Uma importante aplica\u00e7\u00e3o das tuplas \u00e9 a possibilidade de \u201cdesempacotar\u201d seus elementos, permitindo atribu\u00ed-los a diversas vari\u00e1veis. tupla = (1, 2, 3, 4) a, b, c, d = tupla -------------------- a -> 1 b -> 2 c -> 3 d -> 4 Dicion\u00e1rios Dicion\u00e1rio \u00e9 um conjunto de valores, sendo cada um desses valores associados a uma chave de acesso. Eles s\u00e3o declarados da seguinte forma: dic = {\"arroz\": 20.50, \"gasolina\": 6.70, \"g\u00e1s\": 97} \u00c9 poss\u00edvel, tamb\u00e9m, acrescentar ou modificar valores no dicion\u00e1rio: dic = {\"arroz\": 20.50, \"gasolina\": 6.70, \"g\u00e1s\": 97} dic[\"luz\"] = 14.10 dic[\"gasolina\"] = 7.10 --------------------------------------------------- dic -> {\"arroz\": 20.50, \"gasolina\": 7.10, \"g\u00e1s\": 97, \"luz\": 14.10} Os dicion\u00e1rios tamb\u00e9m possuem comandos especiais para sua manipula\u00e7\u00e3o: M\u00e9todo Descri\u00e7\u00e3o Exemplo del Exclui item informando a chave. del dic[\u201carroz\u201d] dic = {\u2018gasolina\u2019: 7.1, \u2018g\u00e1s\u2019: 97, \u2018luz\u2019: 14.1} in Verifica se uma chave existe no dicion\u00e1rio. \u201cbebida\u201d in dic False keys() Obt\u00e9m as chaves de um dicion\u00e1rio. dic.keys() dict_keys([\u2018arroz\u2019, \u2018gasolina\u2019, \u2018g\u00e1s\u2019, \u2018luz\u2019]) values() Obt\u00e9m os valores de um dicion\u00e1rio. dic.values() dict_values([20.50, 6.40, 97, 14.1]) Bibliotecas As bibliotecas armazenam fun\u00e7\u00f5es predefinidas que podem ser utilizadas em qualquer momento do programa. No Python, muitas bibliotecas s\u00e3o instaladas por padr\u00e3o junto com o programa. Normalmente, as bibliotecas s\u00e3o chamadas no in\u00edcio do c\u00f3digo e, para fazer isso, \u00e9 necess\u00e1rio usar o comando \u201cimport\u201d da seguinte forma: import math print(math.factorial(6)) ------------------------ 720 from math import factorial print(factorial(6)) -------------------------- 720 Abaixo, listamos algumas bibliotecas bastante utilizadas no Python: M\u00e9todo Descri\u00e7\u00e3o math Fun\u00e7\u00f5es matem\u00e1ticas. numpy Fun\u00e7\u00f5es matem\u00e1ticas avan\u00e7adas. time Fun\u00e7\u00f5es de tempo. tkinter Fun\u00e7\u00f5es de interface gr\u00e1fica. pillow Fun\u00e7\u00f5es para manipula\u00e7\u00e3o de imagens. Estruturas de Decis\u00e3o As estruturas condicionais, tamb\u00e9m chamadas de estruturas de decis\u00e3o, permitem que o programador altere o fluxo de execu\u00e7\u00e3o de um programa de acordo com o valor (True/False) de um teste l\u00f3gico. No Python, temos tr\u00eas estruturas para isso: \u201cif\u201d, \u201cif...else\u201d e \u201cif...elif...else\u201d. * if: O \u201cif\u201d \u00e9 utilizado quando precisamos decidir se uma parte do c\u00f3digo deve ou n\u00e3o ser executada de acordo com uma condi\u00e7\u00e3o proposta. a = 121 if a%11 == 0: print(\"a \u00e9 m\u00faltiplo de 11\") if...else: O \u201cif...else\u201d \u00e9 utilizado quando queremos que uma parte do c\u00f3digo seja executada caso, na primeira condicional, tenha sido negada. a = 121 if a%11 == 0: print(\"a \u00e9 m\u00faltiplo de 11\") else: print(\"a n\u00e3o \u00e9 m\u00faltiplo de 11\") if...elif...else: O \u201cif...elif...else\u201d \u00e9 utilizado quando existem diversas condi\u00e7\u00f5es no c\u00f3digo. gasolina = 6.40 if gasolina <= 4: print(\"A gasolina est\u00e1 barata!\") elif gasolina > 4 and gasolina <= 6: print(\"O pre\u00e7o est\u00e1 razo\u00e1vel.\") else: print(\"A gasolina est\u00e1 muito cara!\") Estruturas de Repeti\u00e7\u00e3o No Python, a recorr\u00eancia, tamb\u00e9m chamada de estrutura de repeti\u00e7\u00e3o, \u00e9 utilizada para executar uma mesma sequ\u00eancia de comandos por diversas vezes, sendo direcionada por uma condi\u00e7\u00e3o proposta no c\u00f3digo. * While: No \u201cwhile\u201d, o trecho do c\u00f3digo da repeti\u00e7\u00e3o est\u00e1 associado a uma condi\u00e7\u00e3o, sendo executado enquanto a condi\u00e7\u00e3o tiver o valor \u201cverdadeiro\u201d e finalizado, se \u201cfalso\u201d. senha = \"python\" leitor = \"\" while (leitor != senha): leitor = input(\"Digite a senha: \") if leitor == senha: print(\"Acesso liberado.\") else: print(\"Senha incorreta. Tente novamente.\") For: Assim como o \u201cwhile\u201d, o \u201cfor\u201d possibilita estabelecer uma estrutura de repeti\u00e7\u00e3o. Entretanto, o \u201cfor\u201d possui grande aplicabilidade quando queremos trabalhar com sequ\u00eancias num\u00e9ricas, geradas com o comando \u201crange\u201d, ou mesmo associado a uma lista, sendo o trecho do c\u00f3digo executado para cada valor da sequ\u00eancia num\u00e9rica gerada ou da lista utilizada. soma = 0\" for i in range(10): soma = soma = i print(soma) ------------------- notas = [3.10, 4.20, 5.30, 6.40, 7.50, 8.60] soma = 0 for i in notas: soma = soma + i print(soma) Fun\u00e7\u00f5es As fun\u00e7\u00f5es s\u00e3o trechos de c\u00f3digo, com nome e comandos espec\u00edficos, que podem ser utilizados in\u00fameras vezes e em qualquer lugar do programa. No c\u00f3digo abaixo, est\u00e1 definida a fun\u00e7\u00e3o \u201csoma\u201d que tem como par\u00e2metro de entrada a lista \u201cnotas\u201d. def soma(notas) s = 0 for i in notas: s = s + i print(s) ------------------ notas = [3.10, 4.20, 5.30, 6.40, 7.50, 8.60] soma(notas) -> 35.10 Ap\u00f3s definir a fun\u00e7\u00e3o, podemos definir a lista que queremos trabalhar e, em seguida, devemos chamar a fun\u00e7\u00e3o conforme foi feito e colocando a lista \u201cnotas\u201d como par\u00e2metro de entrada. Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser inclu\u00eddas dentro dos par\u00eanteses das fun\u00e7\u00f5es, sendo elas necess\u00e1rias para dar prosseguimento no c\u00f3digo. def maior(x,y) if x > y: print(x, \"\u00e9 maior que\", y) elif x == y: print(\"Os n\u00fameros s\u00e3o iguais\") else: print(y, \"\u00e9 maior que\", x) Um t\u00f3pico importante sobre as fun\u00e7\u00f5es \u00e9 que toda vari\u00e1vel utilizada dentro de uma fun\u00e7\u00e3o \u00e9 uma vari\u00e1vel local, ou seja, ela n\u00e3o ser\u00e1 acess\u00edvel fora de sua fun\u00e7\u00e3o m\u00e3e. Mesmo se houver outra vari\u00e1vel fora da fun\u00e7\u00e3o com o mesmo nome, elas ser\u00e3o completamente diferentes entre si. Para uma vari\u00e1vel ser compartilhada entre diversas fun\u00e7\u00f5es e o programa principal, ela deve ser definida como uma \u201cvari\u00e1vel global\u201d. Para isso, utiliza-se o comando \u201cglobal\u201d para declarar globalmente a vari\u00e1vel. def soma(x,y) global total total = x + y print(\"Soma = \", total) def soma_2(x) global total total = total + x print(total) -------------------------- soma(3,5) -> Soma = 8 soma_2(11) -> 19 No exemplo acima, a fun\u00e7\u00e3o \u201csoma_2\u201d toma como par\u00e2metro a vari\u00e1vel global \u201ctotal\u201d que tamb\u00e9m foi utilizada na fun\u00e7\u00e3o \u201csoma\u201d. Assim, a fun\u00e7\u00e3o \u201csoma_2\u201d ir\u00e1 utilizar o valor da vari\u00e1vel \u201ctotal\u201d de acordo com o que foi realizado na fun\u00e7\u00e3o \u201csoma\u201d. Um comando que tamb\u00e9m pode ser utilizado em fun\u00e7\u00f5es \u00e9 o \u201creturn\u201d. Esse comando tem o objetivo de retornar um valor ao finalizar o uso da fun\u00e7\u00e3o. Quando falamos em retornar um valor, queremos dizer que o valor retornado pela fun\u00e7\u00e3o estar\u00e1 guardado na mem\u00f3ria, mas n\u00e3o estar\u00e1 vis\u00edvel. Para torn\u00e1-lo vis\u00edvel, \u00e9 necess\u00e1rio fazer o uso de alguma fun\u00e7\u00e3o para exibi-lo. No exemplo abaixo, foi utilizada o \u201cprint\u201d para que o usu\u00e1rio possa ver o valor retornado. def soma(x,y) global total total = x + y return total ---------------- print(soma(3,5)) -> 8 List Comprehension List Comprehension \u00e9 uma forma concisa de criar e manipular listas. Abaixo, mostramos um exemplo de cria\u00e7\u00e3o de lista das duas poss\u00edveis formas: for item in range(10): lista.append(item**2) ------------------------ lista = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] lista = [item**2 for item in range(10)] --------------------------------------- lista = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] List Comprehension com if Podemos utilizar, tamb\u00e9m, express\u00f5es condicionais para criar listas ou modificar listas existentes da seguinte forma: (Exemplo: obter os n\u00fameros pares at\u00e9 19) resultado = [numero for numero in range(20) if numero%2 == 0] ------------------------------------------------------------- resultado = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] Caso o c\u00f3digo utilizado tenha v\u00e1rios \"if\", a sintaxe ser\u00e1 feita da seguinte forma: (Exemplo: obter os m\u00faltiplos de 5 e 6 at\u00e9 99) resultado = [numero for numero in range(100) if numero%5 == 0 if numero%6 == 0] ------------------------------------------------------------------------------- resultado = [0, 30, 60, 90] List Comprehension com if...else Tamb\u00e9m \u00e9 poss\u00edvel utilizar List Comprehension com if..else utilizando a seguinte sintaxe: (Exemplo: criar lista que contenha \"1\" quando determinado n\u00famero for m\u00faltiplo de 5 e \"0\" caso contr\u00e1rio) resultado = ['1' if numero % 5 == 0 else '0' for numero in range(16)] --------------------------------------------------------------------- resultado = ['1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1'] M\u00faltiplas List Comprehension Existe a possibilidade de incluirmos List Comprehension dentro de outra List Comprehension. Essa situa\u00e7\u00e3o ocorre, normalmente, quando trabalhamos com matrizes. Abaixo, exemplificamos a transposi\u00e7\u00e3o de uma matriz utilizando List Comprehension: matriz = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] transposta = [[linha[i] for linha in matriz] for i in range(4)] --------------------------------------------------------------- transposta = [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]","title":"A Estrutura do Python"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#a-estrutura-do-python","text":"","title":"A Estrutura do Python"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#variaveis","text":"Vari\u00e1veis s\u00e3o espa\u00e7os de mem\u00f3ria utilizados para armazenar e manipular dados. Diferentemente de outras linguagens de programa\u00e7\u00e3o, n\u00e3o \u00e9 necess\u00e1rio declarar o tipo das vari\u00e1veis a serem usadas no in\u00edcio do c\u00f3digo. Alguns dos tipos de vari\u00e1veis mais utilizados no Python s\u00e3o: * int: armazena n\u00fameros inteiros. * float: armazena n\u00fameros decimais. * string: armazena caracteres de texto","title":"Vari\u00e1veis"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#numeros","text":"Os tipos de n\u00fameros utilizados no Python s\u00e3o: * int: n\u00fameros inteiros * float: n\u00fameros decimais * long: n\u00fameros decimais longos * complex: n\u00fameros complexos Para manipular os n\u00fameros no Python, o usu\u00e1rio disp\u00f5e de diversos operadores aritm\u00e9ticos, l\u00f3gicos e de compara\u00e7\u00e3o. Operadores Aritm\u00e9ticos: S\u00edmbolo Descri\u00e7\u00e3o Exemplo + Soma 5+5=10 - Subtra\u00e7\u00e3o 7-2=5 * Multiplica\u00e7\u00e3o 3*4=12 / Divis\u00e3o 9/3=3 % Resto da divis\u00e3o 10%3=1 ** Pot\u00eancia 3**3=27 Operadores de Compara\u00e7\u00e3o: Operador Descri\u00e7\u00e3o Exemplo < Menor que a<10 <= Menor ou igual b<=5 > Maior que c>2 >= Maior ou igual d>=8 == Igual e==5 != Diferente f!=12 Operadores L\u00f3gicos: Operador Descri\u00e7\u00e3o Exemplo not N\u00e3o not a and E (a<=10) and (c=5) or Ou (a<=10) or (c=5)","title":"N\u00fameros"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#strings","text":"As strings, como visto anteriormente, s\u00e3o um conjunto de caracteres. Normalmente, s\u00e3o utilizadas quando as vari\u00e1veis utilizadas s\u00e3o um texto (palavra, frase, \u2026). Diferentemente dos n\u00fameros, as strings precisam ser introduzidas por meio de aspas simples ou duplas para que sejam reconhecidas pelo Python. No Python, encontramos diversas fun\u00e7\u00f5es para a manipula\u00e7\u00e3o de strings, uma vez que s\u00e3o vari\u00e1veis que n\u00e3o aceitam operadores como os n\u00fameros. Assim, apresentamos abaixo algumas fun\u00e7\u00f5es utilizadas quando trabalhamos com strings: M\u00e9todo Descri\u00e7\u00e3o Exemplo len() Retorna o tamanho da string. string = \u201cpython\u201d len(string) 6 capitalize() Retorna a string com a primeira letra mai\u00fascula. string = \u201cpython\u201d string.capitalize() \u201cPython\u201d count() Informa quantas vezes um caractere aparece na string. string = \u201cpython forever\u201d string.count(\u201co\u201d) 2 startswith() Verifica se a string inicia com determinada sequ\u00eancia. string = \u201cpython\u201d string.startswith(\u201cpyt\u201d) True replace(x1,x2) Substitui na string o trecho x1 pelo x2. string = \u201cpython\u201d string.replace(\u201cthon\u201d,\u201cQGIS\u201d) \u201cpyQGIS\u201d find() Retorna o \u00edndice da primeira ocorr\u00eancia de um determinado caractere na string. string = \u201cpython\u201d string.find(\u201ch\u201d) 3 Al\u00e9m disso, \u00e9 poss\u00edvel manipular strings apenas com operadores presentes no Python, sem a necessidade de utilizar uma fun\u00e7\u00e3o. Abaixo, encontram-se exemplos de como utiliz\u00e1-los: * Concatena\u00e7\u00e3o: a = \"Py\" b = \"thon\" ---------- a+b = \"Python\" Fatiamento: a = \"Python\" ------------ a[1:4] -> \"yth\" a[:3] -> \"Pyt\" a[2:] -> \"thon\"","title":"Strings"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#listas","text":"Listas s\u00e3o conjuntos sequenciais de valores, sendo cada um deles identificado por um \u00edndice. Os \u00edndices s\u00e3o sequenciais e come\u00e7am no \u201c0\u201d. Para se declarar uma lista, \u00e9 necess\u00e1ria a seguinte forma: lista = [\"python\", 1234, [1,2,3,4]] ----------------------------------- lista[0] -> \"python\" lista[1] -> 1234 lista[2] -> [1,2,3,4] len(lista) = 3 Para alterar algum elemento da lista, basta fazer uma atribui\u00e7\u00e3o de valor atrav\u00e9s do \u00edndice. lista = [\"python\", 1234, [1,2,3,4]] ----------------------------------- lista[0] = \"QGIS\" lista -> [\"QGIS\", 1234, [1,2,3,4]] Assim como as strings, as listas tamb\u00e9m possuem fun\u00e7\u00f5es espec\u00edficas que auxiliam o usu\u00e1rio em sua manipula\u00e7\u00e3o. Algumas muito utilizadas est\u00e3o apresentadas na tabela abaixo: M\u00e9todo Descri\u00e7\u00e3o Exemplo len() Retorna o tamanho da lista. lista = [1, 2, 3, 4] len(lista) 4 min()/max() Retorna o menor/maior valor da lista. lista = [1, 2, 3, 4] min(lista) 1 sum() Retorna a soma dos elementos da lista. lista = [1, 2, 3, 4] sum(lista) 10 append() Adiciona um novo valor ao final de outra lista. lista = [1, 2, 3, 4] lista.append(5) lista = [1, 2, 3, 4, 5] del() Remove um elemento da lista. lista = [1, 2, 3, 4] del lista[0] lista = [2, 3, 4] sort() Ordena os elementos da lista em ordem crescente. lista = [4, 3, 2, 1] lista.sort() lista = [1, 2, 3, 4] reverse() Inverte os elementos da lista. lista = [1, 2, 3, 4] lista.reverse() lista = [4, 3, 2, 1] Al\u00e9m das fun\u00e7\u00f5es, o Python possui operadores que auxiliam na manipula\u00e7\u00e3o de listas: * Concatena\u00e7\u00e3o : a = [1, 2, 3] b = [4, 5, 6] ------------- a + b -> [1, 2, 3, 4, 5, 6] Repeti\u00e7\u00e3o : a = [1, 2, 3] ------------- a*3 -> [1, 2, 3, 1, 2, 3, 1, 2, 3] Fatiamento : lista = [\"python\", 123, [1, 2, 3]] ---------------------------------- lista[1:2] -> [123] lista[:3] -> [\"python\", 123, [1, 2, 3]] lista[2:] -> [[1, 2, 3]]","title":"Listas"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#tuplas","text":"As tuplas, assim como as listas, s\u00e3o conjuntos sequenciais de valores, sendo cada valor identificado por um \u00edndice. A principal diferen\u00e7a entre elas \u00e9 que as tuplas s\u00e3o imut\u00e1veis, ou seja, seus elementos n\u00e3o podem ser alterados. Al\u00e9m disso, visualmente, as tuplas s\u00e3o apresentadas com par\u00eanteses, diferentemente dos colchetes de uma lista. tupla = (1, 2, 3, 4) -------------------- type(tupla) -> tuple Uma importante aplica\u00e7\u00e3o das tuplas \u00e9 a possibilidade de \u201cdesempacotar\u201d seus elementos, permitindo atribu\u00ed-los a diversas vari\u00e1veis. tupla = (1, 2, 3, 4) a, b, c, d = tupla -------------------- a -> 1 b -> 2 c -> 3 d -> 4","title":"Tuplas"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#dicionarios","text":"Dicion\u00e1rio \u00e9 um conjunto de valores, sendo cada um desses valores associados a uma chave de acesso. Eles s\u00e3o declarados da seguinte forma: dic = {\"arroz\": 20.50, \"gasolina\": 6.70, \"g\u00e1s\": 97} \u00c9 poss\u00edvel, tamb\u00e9m, acrescentar ou modificar valores no dicion\u00e1rio: dic = {\"arroz\": 20.50, \"gasolina\": 6.70, \"g\u00e1s\": 97} dic[\"luz\"] = 14.10 dic[\"gasolina\"] = 7.10 --------------------------------------------------- dic -> {\"arroz\": 20.50, \"gasolina\": 7.10, \"g\u00e1s\": 97, \"luz\": 14.10} Os dicion\u00e1rios tamb\u00e9m possuem comandos especiais para sua manipula\u00e7\u00e3o: M\u00e9todo Descri\u00e7\u00e3o Exemplo del Exclui item informando a chave. del dic[\u201carroz\u201d] dic = {\u2018gasolina\u2019: 7.1, \u2018g\u00e1s\u2019: 97, \u2018luz\u2019: 14.1} in Verifica se uma chave existe no dicion\u00e1rio. \u201cbebida\u201d in dic False keys() Obt\u00e9m as chaves de um dicion\u00e1rio. dic.keys() dict_keys([\u2018arroz\u2019, \u2018gasolina\u2019, \u2018g\u00e1s\u2019, \u2018luz\u2019]) values() Obt\u00e9m os valores de um dicion\u00e1rio. dic.values() dict_values([20.50, 6.40, 97, 14.1])","title":"Dicion\u00e1rios"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#bibliotecas","text":"As bibliotecas armazenam fun\u00e7\u00f5es predefinidas que podem ser utilizadas em qualquer momento do programa. No Python, muitas bibliotecas s\u00e3o instaladas por padr\u00e3o junto com o programa. Normalmente, as bibliotecas s\u00e3o chamadas no in\u00edcio do c\u00f3digo e, para fazer isso, \u00e9 necess\u00e1rio usar o comando \u201cimport\u201d da seguinte forma: import math print(math.factorial(6)) ------------------------ 720 from math import factorial print(factorial(6)) -------------------------- 720 Abaixo, listamos algumas bibliotecas bastante utilizadas no Python: M\u00e9todo Descri\u00e7\u00e3o math Fun\u00e7\u00f5es matem\u00e1ticas. numpy Fun\u00e7\u00f5es matem\u00e1ticas avan\u00e7adas. time Fun\u00e7\u00f5es de tempo. tkinter Fun\u00e7\u00f5es de interface gr\u00e1fica. pillow Fun\u00e7\u00f5es para manipula\u00e7\u00e3o de imagens.","title":"Bibliotecas"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#estruturas-de-decisao","text":"As estruturas condicionais, tamb\u00e9m chamadas de estruturas de decis\u00e3o, permitem que o programador altere o fluxo de execu\u00e7\u00e3o de um programa de acordo com o valor (True/False) de um teste l\u00f3gico. No Python, temos tr\u00eas estruturas para isso: \u201cif\u201d, \u201cif...else\u201d e \u201cif...elif...else\u201d. * if: O \u201cif\u201d \u00e9 utilizado quando precisamos decidir se uma parte do c\u00f3digo deve ou n\u00e3o ser executada de acordo com uma condi\u00e7\u00e3o proposta. a = 121 if a%11 == 0: print(\"a \u00e9 m\u00faltiplo de 11\") if...else: O \u201cif...else\u201d \u00e9 utilizado quando queremos que uma parte do c\u00f3digo seja executada caso, na primeira condicional, tenha sido negada. a = 121 if a%11 == 0: print(\"a \u00e9 m\u00faltiplo de 11\") else: print(\"a n\u00e3o \u00e9 m\u00faltiplo de 11\") if...elif...else: O \u201cif...elif...else\u201d \u00e9 utilizado quando existem diversas condi\u00e7\u00f5es no c\u00f3digo. gasolina = 6.40 if gasolina <= 4: print(\"A gasolina est\u00e1 barata!\") elif gasolina > 4 and gasolina <= 6: print(\"O pre\u00e7o est\u00e1 razo\u00e1vel.\") else: print(\"A gasolina est\u00e1 muito cara!\")","title":"Estruturas de Decis\u00e3o"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#estruturas-de-repeticao","text":"No Python, a recorr\u00eancia, tamb\u00e9m chamada de estrutura de repeti\u00e7\u00e3o, \u00e9 utilizada para executar uma mesma sequ\u00eancia de comandos por diversas vezes, sendo direcionada por uma condi\u00e7\u00e3o proposta no c\u00f3digo. * While: No \u201cwhile\u201d, o trecho do c\u00f3digo da repeti\u00e7\u00e3o est\u00e1 associado a uma condi\u00e7\u00e3o, sendo executado enquanto a condi\u00e7\u00e3o tiver o valor \u201cverdadeiro\u201d e finalizado, se \u201cfalso\u201d. senha = \"python\" leitor = \"\" while (leitor != senha): leitor = input(\"Digite a senha: \") if leitor == senha: print(\"Acesso liberado.\") else: print(\"Senha incorreta. Tente novamente.\") For: Assim como o \u201cwhile\u201d, o \u201cfor\u201d possibilita estabelecer uma estrutura de repeti\u00e7\u00e3o. Entretanto, o \u201cfor\u201d possui grande aplicabilidade quando queremos trabalhar com sequ\u00eancias num\u00e9ricas, geradas com o comando \u201crange\u201d, ou mesmo associado a uma lista, sendo o trecho do c\u00f3digo executado para cada valor da sequ\u00eancia num\u00e9rica gerada ou da lista utilizada. soma = 0\" for i in range(10): soma = soma = i print(soma) ------------------- notas = [3.10, 4.20, 5.30, 6.40, 7.50, 8.60] soma = 0 for i in notas: soma = soma + i print(soma)","title":"Estruturas de Repeti\u00e7\u00e3o"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#funcoes","text":"As fun\u00e7\u00f5es s\u00e3o trechos de c\u00f3digo, com nome e comandos espec\u00edficos, que podem ser utilizados in\u00fameras vezes e em qualquer lugar do programa. No c\u00f3digo abaixo, est\u00e1 definida a fun\u00e7\u00e3o \u201csoma\u201d que tem como par\u00e2metro de entrada a lista \u201cnotas\u201d. def soma(notas) s = 0 for i in notas: s = s + i print(s) ------------------ notas = [3.10, 4.20, 5.30, 6.40, 7.50, 8.60] soma(notas) -> 35.10 Ap\u00f3s definir a fun\u00e7\u00e3o, podemos definir a lista que queremos trabalhar e, em seguida, devemos chamar a fun\u00e7\u00e3o conforme foi feito e colocando a lista \u201cnotas\u201d como par\u00e2metro de entrada. Os par\u00e2metros s\u00e3o vari\u00e1veis que podem ser inclu\u00eddas dentro dos par\u00eanteses das fun\u00e7\u00f5es, sendo elas necess\u00e1rias para dar prosseguimento no c\u00f3digo. def maior(x,y) if x > y: print(x, \"\u00e9 maior que\", y) elif x == y: print(\"Os n\u00fameros s\u00e3o iguais\") else: print(y, \"\u00e9 maior que\", x) Um t\u00f3pico importante sobre as fun\u00e7\u00f5es \u00e9 que toda vari\u00e1vel utilizada dentro de uma fun\u00e7\u00e3o \u00e9 uma vari\u00e1vel local, ou seja, ela n\u00e3o ser\u00e1 acess\u00edvel fora de sua fun\u00e7\u00e3o m\u00e3e. Mesmo se houver outra vari\u00e1vel fora da fun\u00e7\u00e3o com o mesmo nome, elas ser\u00e3o completamente diferentes entre si. Para uma vari\u00e1vel ser compartilhada entre diversas fun\u00e7\u00f5es e o programa principal, ela deve ser definida como uma \u201cvari\u00e1vel global\u201d. Para isso, utiliza-se o comando \u201cglobal\u201d para declarar globalmente a vari\u00e1vel. def soma(x,y) global total total = x + y print(\"Soma = \", total) def soma_2(x) global total total = total + x print(total) -------------------------- soma(3,5) -> Soma = 8 soma_2(11) -> 19 No exemplo acima, a fun\u00e7\u00e3o \u201csoma_2\u201d toma como par\u00e2metro a vari\u00e1vel global \u201ctotal\u201d que tamb\u00e9m foi utilizada na fun\u00e7\u00e3o \u201csoma\u201d. Assim, a fun\u00e7\u00e3o \u201csoma_2\u201d ir\u00e1 utilizar o valor da vari\u00e1vel \u201ctotal\u201d de acordo com o que foi realizado na fun\u00e7\u00e3o \u201csoma\u201d. Um comando que tamb\u00e9m pode ser utilizado em fun\u00e7\u00f5es \u00e9 o \u201creturn\u201d. Esse comando tem o objetivo de retornar um valor ao finalizar o uso da fun\u00e7\u00e3o. Quando falamos em retornar um valor, queremos dizer que o valor retornado pela fun\u00e7\u00e3o estar\u00e1 guardado na mem\u00f3ria, mas n\u00e3o estar\u00e1 vis\u00edvel. Para torn\u00e1-lo vis\u00edvel, \u00e9 necess\u00e1rio fazer o uso de alguma fun\u00e7\u00e3o para exibi-lo. No exemplo abaixo, foi utilizada o \u201cprint\u201d para que o usu\u00e1rio possa ver o valor retornado. def soma(x,y) global total total = x + y return total ---------------- print(soma(3,5)) -> 8","title":"Fun\u00e7\u00f5es"},{"location":"1%29-Introdu%C3%A7%C3%A3o-ao-Python/#list-comprehension","text":"List Comprehension \u00e9 uma forma concisa de criar e manipular listas. Abaixo, mostramos um exemplo de cria\u00e7\u00e3o de lista das duas poss\u00edveis formas: for item in range(10): lista.append(item**2) ------------------------ lista = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] lista = [item**2 for item in range(10)] --------------------------------------- lista = [0, 1, 4, 9, 16, 25, 36, 49, 64, 81] List Comprehension com if Podemos utilizar, tamb\u00e9m, express\u00f5es condicionais para criar listas ou modificar listas existentes da seguinte forma: (Exemplo: obter os n\u00fameros pares at\u00e9 19) resultado = [numero for numero in range(20) if numero%2 == 0] ------------------------------------------------------------- resultado = [0, 2, 4, 6, 8, 10, 12, 14, 16, 18] Caso o c\u00f3digo utilizado tenha v\u00e1rios \"if\", a sintaxe ser\u00e1 feita da seguinte forma: (Exemplo: obter os m\u00faltiplos de 5 e 6 at\u00e9 99) resultado = [numero for numero in range(100) if numero%5 == 0 if numero%6 == 0] ------------------------------------------------------------------------------- resultado = [0, 30, 60, 90] List Comprehension com if...else Tamb\u00e9m \u00e9 poss\u00edvel utilizar List Comprehension com if..else utilizando a seguinte sintaxe: (Exemplo: criar lista que contenha \"1\" quando determinado n\u00famero for m\u00faltiplo de 5 e \"0\" caso contr\u00e1rio) resultado = ['1' if numero % 5 == 0 else '0' for numero in range(16)] --------------------------------------------------------------------- resultado = ['1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1', '0', '0', '0', '0', '1'] M\u00faltiplas List Comprehension Existe a possibilidade de incluirmos List Comprehension dentro de outra List Comprehension. Essa situa\u00e7\u00e3o ocorre, normalmente, quando trabalhamos com matrizes. Abaixo, exemplificamos a transposi\u00e7\u00e3o de uma matriz utilizando List Comprehension: matriz = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12]] transposta = [[linha[i] for linha in matriz] for i in range(4)] --------------------------------------------------------------- transposta = [[1, 5, 9], [2, 6, 10], [3, 7, 11], [4, 8, 12]]","title":"List Comprehension"}]}